# -*- coding: utf-8 -*-
"""DawaniSonam_HW2_Task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CBD3G1eobnKFLyfS98eMDi-XtcgowMs4

Task 5: Implement Equal‐Frequency Binning on your own (you can use any sorting functions that are available in Python). For each of the attributes in the Quantitative.csv file perform your EqualFrequency Binning (assume I want 50 instances in each bin) and generate a new attribute, that contains new values. These values need to be equal to the averages of the bins (i.e. (min. data value in the bin + max. data value in the bin)/2), to which the particular instances belongs to. Generate new file, QuantitativeBinned.csv, which will contain 2 times more columns than the Quantitative.csv, stored in the order where each original data column is followed by the column with the binned values. The names of the columns with binned values must had “_BIN” suffix added at the end of each of them. How would you compare the original data with the binned version? Discuss what you observed, and try to provide explanations for the things you noticed.
"""

#Task 5
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import math
from tabulate import tabulate

#Copying Task 1, so that even if Task 1 is not executed before this, Task 2 can have Quantitative.csv
#Task 1
dataPreP = pd.read_csv("dataPreP.csv") 
Quantitative=dataPreP[['Attr 4','Attr 5','Attr 6','Attr 7','Attr 8','Attr 9','Attr 10','Attr 11','Attr 12',]]
Quantitative.to_csv('Quantitative.csv',index=False)
Others=dataPreP[['Attr 0','Attr 1','Attr 2','Attr 3','Labels',]]
Others.to_csv('Others.csv',index=False)
#Task 1 ends


Quantitative=pd.read_csv("Quantitative.csv") 

def equalFreqBin(Quantitative):
  QuantitativeBinned=pd.DataFrame(Quantitative)
  cols=Quantitative.columns

  for col in cols:
    newValueList=[None] * 1000
    col_i=QuantitativeBinned.columns.get_loc(col)
    newColName=col+'_BIN'
    #QuantitativeBinned[col] = QuantitativeBinned[col].sort_values().values #using this will give all columns sorted but will lose row integrity
    QuantitativeBinned=QuantitativeBinned.sort_values(col)
   
    for i in range(0,1000):
      value=QuantitativeBinned.iloc[i][col_i]
      iLower=(math.floor(i/50))*50
      iUpper=((math.floor(i/50))*50)+49
      newValue=(QuantitativeBinned.iloc[iLower][col_i]+QuantitativeBinned.iloc[iUpper][col_i])/2
      newValueList[i]=newValue 
    
    QuantitativeBinned.insert(col_i+1, newColName , newValueList, True)
  return QuantitativeBinned
    
QuantitativeBinned=equalFreqBin(Quantitative)
QuantitativeBinned=QuantitativeBinned.sort_index()
print('QuantitativeBinned:')
print(tabulate(QuantitativeBinned, headers='keys', tablefmt='psql'))
QuantitativeBinned.to_csv('QuantitativeBinned.csv',index=False)